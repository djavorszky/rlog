// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rlog.proto

/*
Package rlog is a generated protocol buffer package.

It is generated from these files:
	rlog.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	LogMessage
	LogResponse
*/
package rlog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RegisterResponse struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RegisterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogMessage struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *LogMessage) Reset()                    { *m = LogMessage{} }
func (m *LogMessage) String() string            { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()               {}
func (*LogMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *LogResponse) Reset()                    { *m = LogResponse{} }
func (m *LogResponse) String() string            { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()               {}
func (*LogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "rlog.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "rlog.RegisterResponse")
	proto.RegisterType((*LogMessage)(nil), "rlog.LogMessage")
	proto.RegisterType((*LogResponse)(nil), "rlog.LogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Log service

type LogClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Debug(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
	Fatal(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
	Error(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
	Warn(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
	Info(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error)
}

type logClient struct {
	cc *grpc.ClientConn
}

func NewLogClient(cc *grpc.ClientConn) LogClient {
	return &logClient{cc}
}

func (c *logClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Debug(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Debug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Fatal(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Fatal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Error(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Error", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Warn(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Warn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) Info(ctx context.Context, in *LogMessage, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := grpc.Invoke(ctx, "/rlog.Log/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Log service

type LogServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Debug(context.Context, *LogMessage) (*LogResponse, error)
	Fatal(context.Context, *LogMessage) (*LogResponse, error)
	Error(context.Context, *LogMessage) (*LogResponse, error)
	Warn(context.Context, *LogMessage) (*LogResponse, error)
	Info(context.Context, *LogMessage) (*LogResponse, error)
}

func RegisterLogServer(s *grpc.Server, srv LogServer) {
	s.RegisterService(&_Log_serviceDesc, srv)
}

func _Log_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Debug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Debug(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Fatal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Fatal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Fatal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Fatal(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Error(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Warn(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rlog.Log/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).Info(ctx, req.(*LogMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Log_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rlog.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Log_Register_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _Log_Debug_Handler,
		},
		{
			MethodName: "Fatal",
			Handler:    _Log_Fatal_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _Log_Error_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _Log_Warn_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Log_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rlog.proto",
}

func init() { proto.RegisterFile("rlog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xc9, 0x4f,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x54, 0xb9, 0xf8, 0x83, 0x52,
	0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8,
	0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x1b,
	0x2e, 0x01, 0x84, 0xb2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14,
	0xb0, 0x2a, 0xd6, 0x20, 0xa6, 0xcc, 0x14, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4,
	0xf4, 0x54, 0x09, 0x26, 0xb0, 0x56, 0x18, 0x57, 0xc9, 0x8c, 0x8b, 0xcb, 0x27, 0x3f, 0xdd, 0x17,
	0xc2, 0x23, 0x41, 0x9f, 0x26, 0x17, 0xb7, 0x4f, 0x7e, 0x3a, 0xdc, 0x42, 0x29, 0x2e, 0x8e, 0x22,
	0x28, 0x1b, 0xea, 0x38, 0x38, 0xdf, 0x68, 0x03, 0x13, 0x17, 0xb3, 0x4f, 0x7e, 0xba, 0x90, 0x35,
	0x17, 0x07, 0xcc, 0xa1, 0x42, 0xa2, 0x7a, 0x60, 0xef, 0xa2, 0xf9, 0x4f, 0x4a, 0x0c, 0x5d, 0x18,
	0x62, 0x84, 0x12, 0x83, 0x90, 0x1e, 0x17, 0xab, 0x4b, 0x6a, 0x52, 0x69, 0xba, 0x90, 0x00, 0x44,
	0x09, 0xc2, 0xd1, 0x52, 0x82, 0x70, 0x11, 0x54, 0xf5, 0x6e, 0x89, 0x25, 0x89, 0x39, 0x24, 0xa8,
	0x77, 0x2d, 0x2a, 0xca, 0x2f, 0x22, 0x56, 0xbd, 0x2e, 0x17, 0x4b, 0x78, 0x62, 0x51, 0x1e, 0x09,
	0xca, 0x3d, 0xf3, 0xd2, 0xf2, 0x89, 0x54, 0x9e, 0xc4, 0x06, 0x4e, 0x07, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0xd3, 0x4f, 0x65, 0x15, 0x02, 0x00, 0x00,
}
